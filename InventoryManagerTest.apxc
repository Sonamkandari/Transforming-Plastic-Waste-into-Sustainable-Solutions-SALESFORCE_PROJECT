@isTest
public class InventoryManagerTest {

    @testSetup
    static void setupTestData() {
        // Create a product with initial stock of 50
        Re_Plastic_Innovations_Recycled_Product__c product = new Re_Plastic_Innovations_Recycled_Product__c(
            Stock_Level__c = 50,
            Threshold__c = 10
        );
        insert product;
    }

    @isTest
    static void testProcessOrderStock() {
        // Fetch product
        Re_Plastic_Innovations_Recycled_Product__c product = [SELECT Id FROM Re_Plastic_Innovations_Recycled_Product__c LIMIT 1];

        // Create orders
        List<Re_Plastic_Innovations_Order__c> orders = new List<Re_Plastic_Innovations_Order__c>{
            new Re_Plastic_Innovations_Order__c(Recycled_Product__c = product.Id, Quantity__c = 20),
            new Re_Plastic_Innovations_Order__c(Recycled_Product__c = product.Id, Quantity__c = 40)
        };

        insert orders;

        // Call method manually (since this is a unit test)
        Test.startTest();
        InventoryManager.processOrderStock(orders);
        Test.stopTest();

        // Check updated stock
        Re_Plastic_Innovations_Recycled_Product__c updatedProduct = [
            SELECT Stock_Level__c FROM Re_Plastic_Innovations_Recycled_Product__c WHERE Id = :product.Id
        ];
        System.assertEquals(0, updatedProduct.Stock_Level__c, 'Stock should be 0 after processing orders');

        // Check restock requests (only 1 should be created due to second order being too large)
        List<Re_Plastic_Innovations_Restock_Request__c> restockRequests = [
            SELECT Id FROM Re_Plastic_Innovations_Restock_Request__c WHERE Status__c = 'Pending'
        ];
        System.assertEquals(1, restockRequests.size(), 'One restock request should be created');
    }

    @isTest
    static void testProcessRestockApproval() {
        // Fetch product and create a restock request manually
        Re_Plastic_Innovations_Recycled_Product__c product = [SELECT Id, Stock_Level__c FROM Re_Plastic_Innovations_Recycled_Product__c LIMIT 1];

        Re_Plastic_Innovations_Restock_Request__c restock = new Re_Plastic_Innovations_Restock_Request__c(
            Product__c = product.Id,
            Requested_Quantity__c = 30,
            Status__c = 'Pending'
        );
        insert restock;

        // Approve the restock request
        restock.Status__c = 'Approved';
        update restock;

        Decimal initialStock = product.Stock_Level__c;

        Test.startTest();
        InventoryManager.processRestockApproval(new List<Re_Plastic_Innovations_Restock_Request__c>{restock});
        Test.stopTest();

        Re_Plastic_Innovations_Recycled_Product__c updatedProduct = [
            SELECT Stock_Level__c FROM Re_Plastic_Innovations_Recycled_Product__c WHERE Id = :product.Id
        ];

        Decimal expectedStock = initialStock + 30;
        System.assertEquals(expectedStock, updatedProduct.Stock_Level__c, 'Stock should increase after restock approval');
    }
}
